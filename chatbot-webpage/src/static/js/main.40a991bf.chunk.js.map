{"version":3,"sources":["chatbot/config.js","chatbot/ActionProvider.js","chatbot/MessageParserFormal.js","chatbot/MessageParserInformal.js","ChatPage.js","chatbot.png","PersonalityPage.js","reportWebVitals.js","index.js"],"names":["config","botName","initialMessages","createChatBotMessage","ActionProvider","setStateFunc","createClientMessage","greet","message_text","message","addMessageToState","setState","prevState","messages","this","MessageParserFormal","actionProvider","state","console","log","fetch","method","headers","body","then","response","status","json","data","text","formal_trans","text_trans","split","MessageParserInformal","informal_trans","ChatPage","props","formal","className","messageParser","PersonalityPage","React","label","setLabel","src","chatbot_logo","alt","FormControlLabel","id","sx","display","control","Switch","checked","onChange","event","setFormal","name","color","to","Stack","spacing","direction","Button","variant","endIcon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Index","useState","StrictMode","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40a991bf.chunk.js","sourcesContent":["// Config starter code\r\nimport { createChatBotMessage } from \"react-chatbot-kit\";\r\n\r\nconst config = {\r\n    botName: \"BlenderBot\",\r\n    initialMessages: [createChatBotMessage(`Hi! Talk to me :D`)]\r\n}\r\n\r\nexport default config","\r\n// ActionProvider starter code\r\nclass ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc, createClientMessage) {\r\n        this.createChatBotMessage = createChatBotMessage;\r\n        this.setState = setStateFunc;\r\n        this.createClientMessage = createClientMessage;\r\n    }\r\n\r\n    greet = (message_text) => {\r\n        const message = this.createChatBotMessage(message_text);\r\n        this.addMessageToState(message);\r\n    };\r\n\r\n    addMessageToState = (message) => {\r\n        // console.log(\"what is this?\" + JSON.stringify(message))\r\n        this.setState((prevState) => ({\r\n            ...prevState,\r\n            messages: [...prevState.messages, message],\r\n        }));\r\n    };\r\n}\r\n\r\n\r\nexport default ActionProvider;","\r\nclass MessageParserFormal {\r\n  constructor(actionProvider, state) {\r\n    this.actionProvider = actionProvider;\r\n    this.state = state;\r\n  }\r\n  \r\n  parse(message) {\r\n    console.log(\"user input: \" + message)\r\n    fetch('/interact', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        },\r\n        body: message\r\n    })\r\n    .then((response) => {\r\n        if (response.status == 200) {\r\n            return response.json()\r\n        } else {\r\n            return \"\"\r\n        }\r\n    })\r\n    .then(data=>{{\r\n        if (data != \"\") {\r\n          console.log(\"bot input: \" + data.text)\r\n          console.log(\"bot text_trans: \")\r\n          this.actionProvider.greet(\"Original: \" + data.text);\r\n          const formal_trans = data.text_trans.split(\"|||\")[0];\r\n          this.actionProvider.greet(\"Paraphrased: \" + formal_trans);\r\n          \r\n        } else {\r\n          this.actionProvider.greet(\"Sorry, my backend had some issue:(\");\r\n        }\r\n    }})\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default MessageParserFormal;","\r\nclass MessageParserInformal {\r\n    constructor(actionProvider, state) {\r\n      this.actionProvider = actionProvider;\r\n      this.state = state;\r\n    }\r\n    \r\n    parse(message) {\r\n      console.log(\"user input: \" + message)\r\n      fetch('/interact', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n          },\r\n          body: message\r\n      })\r\n      .then((response) => {\r\n          if (response.status == 200) {\r\n              return response.json()\r\n          } else {\r\n              return \"\"\r\n          }\r\n      })\r\n      .then(data=>{{\r\n          if (data != \"\") {\r\n            console.log(\"bot input: \" + data.text)\r\n            console.log(\"bot text_trans: \")\r\n            this.actionProvider.greet(\"Original: \" + data.text);\r\n            const informal_trans = data.text_trans.split(\"|||\")[1];\r\n            this.actionProvider.greet(\"Paraphrased: \" + informal_trans);\r\n            \r\n            \r\n          } else {\r\n            this.actionProvider.greet(\"Sorry, my backend had some issue:(\");\r\n          }\r\n      }})\r\n    }\r\n  }\r\n\r\nexport default MessageParserInformal;\r\n","// import logo from './logo.svg';\nimport './ChatPage.css';\nimport Chatbot from \"react-chatbot-kit\";\nimport config from \"./chatbot/config\";\nimport ActionProvider from \"./chatbot/ActionProvider\";\nimport MessageParserFormal from \"./chatbot/MessageParserFormal\";\nimport MessageParserInformal from \"./chatbot/MessageParserInformal\";\nfunction ChatPage(props) {\n  if (props.formal) {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Chatbot\n            config={config}\n            actionProvider={ActionProvider}\n            messageParser={MessageParserFormal}\n          />\n        </header>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Chatbot\n            config={config}\n            actionProvider={ActionProvider}\n            messageParser={MessageParserInformal}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default ChatPage;\n","export default __webpack_public_path__ + \"static/media/chatbot.d1a5134c.png\";","import * as React from 'react';\r\nimport './PersonalityPage.css';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\n// import UofT from './uoft_logo.png';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport Switch from '@mui/material/Switch';\r\nimport chatbot_logo from './chatbot.png';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\n\r\n\r\nfunction PersonalityPage(props) {\r\n    const [label, setLabel] = React.useState(\"Formal Chatbot\");\r\n    const handleChange = (event) => {\r\n        props.setFormal(!props.formal);\r\n        if (props.formal) {\r\n            setLabel(\"Formal Chatbot\")\r\n        } else {\r\n            setLabel(\"Informal Chatbot\")\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"personality-page\">\r\n            <div className=\"logo\">\r\n                <img src={chatbot_logo} alt=\"Chatbot Icon\" />\r\n            </div>\r\n            <br />\r\n            <br />\r\n            <div className=\"inputs\">\r\n                \r\n                <FormControlLabel\r\n                    id=\"control-label\"\r\n                    sx={{\r\n                    display: 'block',\r\n                    }}\r\n                    control={\r\n                        <Switch\r\n                        checked={props.formal}\r\n                        onChange={handleChange}\r\n                        name=\"style\"\r\n                        color=\"primary\"\r\n                    />\r\n                    }\r\n                    label={label}\r\n                />\r\n                <br/>\r\n                <Link to=\"/chat-page\">\r\n                    <Stack spacing={2} direction=\"row\">\r\n                        <Button id=\"redirect-button\" variant=\"outlined\" endIcon={<SendIcon />}>Talk with our Paraphrased Chatbot</Button>\r\n                    </Stack>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonalityPage;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ChatPage from './ChatPage';\nimport PersonalityPage from './PersonalityPage';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//      {/* <ChatPage /> */}\n//     <Router>\n//       <div>\n//         <Route exact path=\"/ECE496-Chatbot-Webpage-Frontend\">\n//             <Redirect to=\"/personality-page\" />\n//         </Route>\n//         <Route exact path=\"/\">\n//             <Redirect to=\"/personality-page\" />\n//         </Route>\n//         <Switch>\n//           <Route path=\"/personality-page\">\n//             <PersonalityPage formal={formal} setFormal={setFormal}/>\n//           </Route>\n//           <Route path=\"/chat-page\">\n//             <ChatPage formal={formal}/>\n//           </Route>\n//         </Switch>\n//       </div>\n//     </Router>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\nfunction Index() {\n  const [formal, setFormal] = React.useState(false);\n  return (\n    <React.StrictMode>\n      <Router>\n        <div>\n          <Route exact path=\"/ECE496-Chatbot-Webpage-Frontend\">\n              <Redirect to=\"/personality-page\" />\n          </Route>\n          <Route exact path=\"/\">\n              <Redirect to=\"/personality-page\" />\n          </Route>\n          <Switch>\n            <Route path=\"/personality-page\">\n              <PersonalityPage formal={formal} setFormal={setFormal}/>\n            </Route>\n            <Route path=\"/chat-page\">\n              <ChatPage formal={formal}/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </React.StrictMode>\n  )\n}\n\nReactDOM.render(\n  <Index/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}